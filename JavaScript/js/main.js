/*--------------------------------------------------------------------------------------------

                    Дан массив, нужно отфильтровать и получить только строку/число

----------------------------------------------------------------------------------------------*/
const array = [1, '2', 'nick', { id: 1, name: 'Николай' }, 'Word', 4, '55', 100];

// filter возвращает новый массив. создаем массив stringArray
const stringArray = array.filter((value) => {
    // возращаем все элементы с типов string и которые не являются числом - isNaN
    return typeof value === 'string' && isNaN(value);
});

console.log(stringArray);

// filter возвращает новый массив. создаем массив numberArray
const numberArray = array.filter((value) => {
    // Возращаем все числовые элементы (для того что бы в массив попали строковые числа "20")
    return !isNaN(value);
});

console.log(numberArray);

/*--------------------------------------------------------------------------------------------

                            Меняем регистр у массива

----------------------------------------------------------------------------------------------*/
const arr = ['нИколаЙ', 'рыбКин', 'роман', 'эдуард', 'неЛли', 'Юля', 'дАШа', 'СнеЖанна', 'альБИна'];

// forEach
arr.forEach((elem, index, arr) => {
    // Перезаписываем элементы в массиве, и делаем первую букву заглавной
    arr[index] = elem[0].toUpperCase() + elem.slice(1).toLowerCase();
});

// map - возращает новый массив(element,index,array)
const correctName = arr.map((elem) => {
    // берем первый символ с большой буквы + берем весь элемент обрезаем певую букву
    return elem[0].toUpperCase() + elem.slice(1).toLowerCase();
});

/*--------------------------------------------------------------------------------------------

                            Случайный HEX

----------------------------------------------------------------------------------------------*/
// Получить случайный HEX от f000000 до 
function getRandomHex() {
    // Округляем в меньшую сторону полученое случ.число умножаем на 2 в 24 степени и возводим 16ричную систему
    return '#' + Math.floor(Math.random() * 2 ** 24).toString(16);
}

/*--------------------------------------------------------------------------------------------

                            Возращает числа из масива включительно

    arr.filter(inBetween(3, 6))– выбирает только значения между 3 и 6(включительно).//3,4,5,6
            
    alert( arr.filter(inArray([1, 2, 10])) ); -выбирает только элементы, совпадающие с одним из элементов массива // 1,2

----------------------------------------------------------------------------------------------*/
const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

function inBetween(a, b) {
    return function(x) {
        return x >= a && x <= b;
    }
}

function inArray(arr) {
    return function(x) {
        return arr.includes(x);
    }
}

/*--------------------------------------------------------------------------------------------

                            Сортировка по имени/возрасту
                            
                    users.sort(byField('name')); // Ann, John, Pete

----------------------------------------------------------------------------------------------*/
let users = [
    { name: "John", age: 20, surname: "Johnson" },
    { name: "Pete", age: 18, surname: "Peterson" },
    { name: "Ann", age: 19, surname: "Hathaway" }
];

function byField(field) {
    return (a, b) => a[field] > b[field] ? 1 : -1;
}

// Фибоначчи . через цикл и через рекрусию

// ВОПРОСЫ
// 1. Что такое замыкание? Все функции в JS являются замыканиями. Все функции «при рождении» получают скрытое свойство [[Environment]], которое ссылается на лексическое окружение места, где они были созданы.
// (Одним из важных побочных эффектов в V8 (Chrome, Opera) является то, что такая переменная становится недоступной при отладке) - alert(value) если value есть и в функции и глобально обьявленной переменной
// 2. что такое function declaration и function expression - FD - обьявляется в основном потоке кода и будет инициализирована как только скрипт запустится. FE - функция была создана как часть выражения. let = f().... и будет инициализирована как тольк скирпт дойдет до этой строки

// Как испраить код что бы он показывал правильный номер
// function makeArmy() {
//     let shooters = [];

//     let i = 0;
//     while (i < 10) {
//         let shooter = function() {
//             console.log(i);
//         }
//         shooters.push(shooter);
//         i++;
//     }

//     return shooters;
// }

// let army = makeArmy();

// army[0](); // 0
// army[1](); // 1
// army[2](); // 2
/*--------------------------------------------------------------------------------------------

                            Способы перебора массива
                            
                    
----------------------------------------------------------------------------------------------*/
// for in - работает с индексом
// for of - со значениями
// forEach(item,index,arr); ничего не возращает и позволяет изменить данный массив
// map (item,index,arr) - вернет новый массив
// filter (item,index,arr) - вернет новый массив с элементами прошедшими проверку
// some (item,index,arr) - проверяет массив и если хотя бы один элемент отвечает условиям возращает true иначе false
// every (item,index,arr) - проверяет каждый элемент, все элементы должны пройти проверку true иначе false
// reduce (accumulator, currentValue, index, array){},0 или [] - можно сложить все элементы массива(0 - начальное значение для accumulator)
// reduceRight(accumulator, currentValue, index, array) тоже самое только справа на лево
// includes() - сравнивает массив с ()
const number = [54, 20, 80, -35, 32, 29, 15];

const names = ['vladiMir', 'Mark', 'Logan', 'VicTor', 'maks', 'Kate', 'Alex'];

const mix = ['Glo', 25, true, 'Academy', '15', -2, null];

const badNum = [45, 20, 74, -35, 'hi', 32, 29, 5];

// собрать из 2-мерного массива одномерный reduce and concat
const arr = [
    [1, 2],
    [3, 4],
    [5, 6]
];
// вывести без повторений
const badNum = [45, 5, 74, -35, 'hi', 32, 29, 5, 7, 45, -35, 74, 5, 'hi'];

const num = badNum.filter((item, i) => {
    return badNum.indexOf(item) === i;
})

// Факториал числа 3! = 1*2*3; 5! = 5*4*3*2*1;
function factorial(n) {
    return (n != 1) ? n * factorial(n - 1) : 1;
}




// console.log('МЕТОДЫ');
// console.log('body.previousElementSibling: ', body.previousElementSibling);
// console.log('body.nextElementSibling: ', body.nextElementSibling);
// console.log('body.parentElement: ', body.parentElement);
// console.log('body.children: ', body.children);
// console.log('body.firstElementChild: ', body.firstElementChild);
// console.log('body.lastElementChild: ', body.lastElementChild);

// NODE
// nodeType
// tagName
// nodeName
// firstChild
// lastChild
// data
// innerHTML
// outerHTML
// textContent

/*---------------------ЗАДАЧА 1 на массив--------------------*/
// Создать массив
// Вывести массив
// Сделать 2 кнопки добавить и удалить с массива
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 2 на слайдер------------------*/
// Создать слайдер в html + css
// Добавит внопки ВЛЕВО и ВПРАВО
// Сделать сдвиг по таймеру 
// Обнулить таймер когда слайдер дойдет до конца
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 3 меняем стил при клике на данный элем------------------*/
// Сделать параграфы
// При клике на данный параграф менять его цвет
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 4 генератор CSS------------------*/
// input - range создаем
// делаем блок который будем менять
// создаем textarea и выводим в него стиль который меням с вендерным префиксом(-webkit-border-radius: border-radius:) 
// Считываем значения с инпута и приего изменении меняем блок
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 5 работа с радио кнопки------------------*/
// Создать ридиокнопки
// Вывести выбраную кнопку в консоль при нажатии на радиокнопку
// Вывести с помощью отдельной кнопки, выбранную ридиокнопку в alert
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 6 Обьекты------------------*/
// Создать обьект
// Вывести его на страницу ключ --- значение
// Создайте ассоциативный массив свойство mas которое содержит массив чисел (любого количества), добавьте метод, который выводит сумму чисел содержащихся в mas.
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 6 Обьекты------------------*/
//Создайте массив, ключами которого служат артикулы товара (любое пятизначное число), а значениями – ассоциативный массив, который содержит название товара, стоимость, вес единицы товара, ссылку на изображение, отметку о доступности товара на складе.

// Выведите массив в консоль. Выведите на страницу HTML описание первого товара.
/*---------------------КОНЕЦ-----------------------*/
// https://www.iconfinder.com/

/*---------------------ЗАДАЧА 7 События мыши------------------*/
// Создаем блок 100х100px
// При одном клике меням цвет, после по двойному клику меням цвет
// Правой кнопке мыши меняем цвет, отключаем контекстное меню
// Принаведении на элемент и выход с него
// Увеличить размер блока при движении мыши в нем
// Нажимаем и держим кнопку
// Отпускаем мышь
// Вывести какой кнопкой было нажато на блок
// Картинку вставляем и приклепляем изображение к мыше clientX clienY
/*---------------------КОНЕЦ-----------------------------------*/

/* ----------------------------------------------------------------------------------------------- */


//                       *************************


/*-----------------------------ЗАДАЧИ С ВИДЕО-------------------------------------------------------*/
/*---------------------ЗАДАЧА 1------------------*/
// Сооздайте функцию palmTree(n), которая будет принимать целое положительно n и возращать строку, состоящую из символов "p".
// Например, вызов palmTree(3), функция вернет "ррр".
// ПРимечание:при нечисловом аргументе функция должна вренуть false, а при вызове без аргумента - один символ "р"

// const palmTree = (n = 1) => typeof n == 'number' && n > 0 ? 'p'.repeat(n) : false;
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 2------------------*/
//  Реализуйте функцию autoReplace(needles, change, haystack), которая будет принимать целое массив строк, которые нужно поменять на сроку change внутри строки haystack. Н
// Например: вызов функции autoReplace(['салат', 'помидоры'], 'еда', 'свежие помидоры пошли в салат')
// Должна вернуть строку "свежие еда пошли в еда"
// Привмечание: можно использовать регулярные выражения, но это не обязательно, при это регистр не должон учитываться. При отсутствии параметров должен вернуть false

// function autoRaplace(array, change, string) {
//     if (!array || !change || !string) return false;
//     return string.replace(new RegExp(array.join('|'), 'gi'), change);
// }
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 3 ------------------*/
// Создайте функцию autoTags(str, tags, url), которая принимает строку str, массив слов для замены на теги и базовый URL
// (по умолчанию должен иметь значение "https://mysite.local/tag/"), которые нужно сделать тегами в строке str.
// Например, вызов функции autoTags('интересно изучать js', ['html', 'js'])
// Должна вернуть строку 'интересно изучать <a href="https://mysite.local/tag/js">@js</a>'
// Примечания: если вы увидите как замыкание может упростить работу над задачей, используйте его

// const getAutoTags = (base = 'https://mysite.local/tag/') => {
//     return (str, tags, url = base) => {
//         tags = '(' + tags.join("|") + ')';
//         out.insertAdjacentHTML('afterbegin', str.replace(new RegExp(tags, 'gi'), `<a href="${url}$&">@$&</a>`));
//         return str.replace(new RegExp(tags, 'gi'), `<a href="${url}$1">@$1</a>`);
//     }
// }
/*---------------------КОНЕЦ-----------------------*/

/*---------------------ЗАДАЧА 4------------------*/
// Реализуйте функцию genitive(n, word). Функция принимает положительное целое число и обьект word с вариантами записи 
// слов для разных чисел. Обькт word имеет свойство singular many1 many2, {singular: 'товар', many1:'товара', many2:'товаров'}
// Функция должна корректно возращать строку вида '2 товара' или '29 товаров'. 
// Например, при вызове genitive(5, {singular: 'курс', many1:'курса', many2:'курсов'})
// Функция должна вернуть строку '5 курсов'
/*---------------------КОНЕЦ-----------------------*/


//  Реализуйте функцию autoReplace(needles, change, haystack), которая будет принимать целое массив строк, которые нужно поменять на сроку change внутри строки haystack. Н
// Например: вызов функции autoReplace(['салат', 'помидоры'], 'еда', 'свежие помидоры пошли в салат')
// Должна вернуть строку "свежие еда пошли в еда"
// Привмечание: можно использовать регулярные выражения, но это не обязательно, при это регистр не должон учитываться. При отсутствии параметров должен вернуть false


// Создайте функцию autoTags(str, tags, url), которая принимает строку str, массив слов для замены на теги и базовый URL
// (по умолчанию должен иметь значение "https://mysite.local/tag/"), которые нужно сделать тегами в строке str.
// Например, вызов функции autoTags('интересно изучать js', ['html', 'js'])
// Должна вернуть строку 'интересно изучать <a href="https://mysite.local/tag/js">@js</a>'
// Примечания: если вы увидите как замыкание может упростить работу над задачей, используйте его